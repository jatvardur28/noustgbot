import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import httpx
import os
from dotenv import load_dotenv
import json
import time
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
NOUS_API_KEY = os.getenv('NOUS_API_KEY')

if not BOT_TOKEN or not NOUS_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã BOT_TOKEN –∏–ª–∏ NOUS_API_KEY –≤ .env —Ñ–∞–π–ª–µ")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# URL –¥–ª—è API Nous Research
NOUS_API_URL = "https://inference-api.nousresearch.com/v1/chat/completions"

# [–ò–ó–ú–ï–ù–ï–ù–û] –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ - –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –ö–ê–ß–ï–°–¢–í–ê
AVAILABLE_MODELS = {
    "deephermes": {
        "name": "DeepHermes-3-Mistral-24B-Preview",
        "display_name": "üß† DeepHermes 24B (–ë—ã—Å—Ç—Ä–∞—è –∏ –≥–ª—É–±–æ–∫–∞—è)",
        "context": "32k",
        "description": "–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∞—è –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è",
        "system_prompt": "You are a deep thinking AI, you may use extremely long chains of thought to deeply consider the problem and deliberate with yourself via systematic reasoning processes to help come to a correct solution prior to answering. You should enclose your thoughts and internal monologue inside <think> </think> tags, and then provide your solution or response to the problem.",
        "max_tokens": 1024,
        "temperature": 0.7,
        "timeout": 120.0
    },
    "hermes405b": {
        "name": "Hermes-3-Llama-3.1-405B",
        "display_name": "üöÄ Hermes 405B (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â—å)",
        "context": "32k", 
        "description": "–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —Å –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º",
        # [–ò–ó–ú–ï–ù–ï–ù–û] –ü—Ä–æ–º–ø—Ç, –ø–æ–æ—â—Ä—è—é—â–∏–π –≥–ª—É–±–æ–∫–∏–π –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç, –∞ –Ω–µ –∫—Ä–∞—Ç–∫–æ—Å—Ç—å.
        "system_prompt": "You are Hermes 3, one of the most powerful AI assistants in the world. Your goal is to provide deeply reasoned, comprehensive, and accurate answers. Before providing the final response, you can use a long chain of thought to analyze the problem from multiple angles. Be thorough and detailed.",
        # [–ò–ó–ú–ï–ù–ï–ù–û] –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
        "max_tokens": 2048,
        # [–ò–ó–ú–ï–ù–ï–ù–û] –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ã—à–µ–Ω–∞ –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
        "temperature": 0.6,
        # [–ò–ó–ú–ï–ù–ï–ù–û] –¢–∞–π–º–∞—É—Ç —É–≤–µ–ª–∏—á–µ–Ω, —á—Ç–æ–±—ã –¥–∞—Ç—å –º–æ–¥–µ–ª–∏ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å.
        "timeout": 240.0
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –º–æ–¥–µ–ª—å, —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
user_settings = {}

# –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ rate limiting
user_stats = {}
user_last_request = {}  # –î–ª—è rate limiting
RATE_LIMIT_SECONDS = 3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

def get_user_model(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_settings.get(user_id, {}).get('model', 'deephermes')

def set_user_model(user_id: int, model: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_settings:
        user_settings[user_id] = {}
    user_settings[user_id]['model'] = model

def get_user_debug_mode(user_id: int) -> bool:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_settings.get(user_id, {}).get('debug', False)

def set_user_debug_mode(user_id: int, debug: bool):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_settings:
        user_settings[user_id] = {}
    user_settings[user_id]['debug'] = debug

def check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_time = time.time()
    last_request = user_last_request.get(user_id, 0)
    
    if current_time - last_request < RATE_LIMIT_SECONDS:
        return False
    
    user_last_request[user_id] = current_time
    return True

def get_time_until_next_request(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    current_time = time.time()
    last_request = user_last_request.get(user_id, 0)
    remaining = RATE_LIMIT_SECONDS - (current_time - last_request)
    return max(0, int(remaining))

def create_model_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    keyboard = []
    for model_key, model_info in AVAILABLE_MODELS.items():
        keyboard.append([
            InlineKeyboardButton(
                text=model_info["display_name"],
                callback_data=f"model_{model_key}"
            )
        ])
    keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def call_nous_api(user_message: str, user_id: int, retry_count: int = 0) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Nous Research
    """
    headers = {
        "Authorization": f"Bearer {NOUS_API_KEY}",
        "Content-Type": "application/json"
    }
    
    user_model = get_user_model(user_id)
    model_config = AVAILABLE_MODELS[user_model]
    
    # [–ò–ó–ú–ï–ù–ï–ù–û] –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (—É—Ä–µ–∑–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞–Ω–∞.
    # –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    # –£–ø—Ä–æ—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.
    if len(user_message) > 1000 and retry_count > 0:
        user_message = user_message[:800] + "... (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏)"

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç - —É–ø—Ä–æ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
    system_prompt = model_config["system_prompt"]
    if retry_count > 0:
        system_prompt = "You are a helpful AI assistant. Answer briefly and clearly."
    
    max_tokens = model_config["max_tokens"]
    temperature = model_config["temperature"]
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
    if retry_count > 0:
        max_tokens = min(max_tokens, 512)
        temperature = 0.2  # –ë–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–µ—Ç—Ä–∞—è
    
    payload = {
        "model": model_config["name"],
        "messages": [
            {
                "role": "system",
                "content": system_prompt
            },
            {
                "role": "user", 
                "content": user_message
            }
        ],
        "max_tokens": max_tokens,
        "temperature": temperature,
        "stream": False,
        "top_p": 0.95,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0
    }
    
    try:
        timeout_read = model_config["timeout"]
        if retry_count > 0:
            timeout_read = min(timeout_read, 60.0)
            
        timeout = httpx.Timeout(
            connect=30.0, 
            read=timeout_read, 
            write=30.0, 
            pool=30.0
        )
        
        async with httpx.AsyncClient(timeout=timeout) as client:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ {model_config['display_name']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1})")
            
            response = await client.post(NOUS_API_URL, json=payload, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                ai_response = data['choices'][0]['message']['content'].strip()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {model_config['display_name']} (–¥–ª–∏–Ω–∞: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return ai_response
                
            elif response.status_code == 429:
                logger.warning("Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                return "üö´ **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã. Nous Research –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤."
                
            elif response.status_code == 400:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ: {response.text}")
                if retry_count == 0:
                    return await call_nous_api("–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å: " + user_message[:200], user_id, retry_count + 1)
                return "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                
            else:
                logger.error(f"API Error: {response.status_code} - {response.text}")
                return f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ API ({response.status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
    except httpx.TimeoutException:
        logger.error(f"‚è∞ Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {model_config['display_name']} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1})")
        
        if retry_count < 1:
            logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º...")
            return await call_nous_api(user_message, user_id, retry_count + 1)
            
        if user_model == "hermes405b":
            return f"‚è∞ **{model_config['display_name']} –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π**\n\n–ú–æ–¥–µ–ª—å –Ω–µ —É—Å–ø–µ–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –∑–∞ {model_config['timeout']} —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å/—Ä–∞–∑–±–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞ —á–∞—Å—Ç–∏\n‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ DeepHermes 24B (/model)\n‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É"
        else:
            return f"‚è∞ {model_config['display_name']} —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å."
            
    except httpx.ConnectError:
        logger.error("üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Nous API")
        return "üåê **–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è**\n\n–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AI-—Å–µ—Ä–≤–∏—Å—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

def clean_ai_response(response: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç AI –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    import re
    think_pattern = r'<think>.*?</think>'
    cleaned = re.sub(think_pattern, '', response, flags=re.DOTALL)
    return cleaned.strip()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_name = message.from_user.first_name or "–î—Ä—É–≥"
    user_id = message.from_user.id
    current_model = AVAILABLE_MODELS[get_user_model(user_id)]
    
    welcome_text = f"""
ü§ñ **–ü—Ä–∏–≤–µ—Ç, {user_name}!** –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–±–æ—Ç–∞ –Ω–∞ –±–∞–∑–µ Nous Research!

üß† **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model['display_name']}

**üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
‚Ä¢ üß† **DeepHermes 24B** - –ë—ã—Å—Ç—Ä–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è.
‚Ä¢ üöÄ **Hermes 405B** - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ—â–Ω–∞—è, –¥–ª—è —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

**üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –†–µ—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –Ω–∞—É–∫–µ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è  
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

**‚ö° –ö–æ–º–∞–Ω–¥—ã:**
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/model - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å
/debug - —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–¥–ª—è 24B)
/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å! üöÄ
    """
    await message.answer(welcome_text)

@dp.message(Command("model"))
async def cmd_model(message: Message):
    user_id = message.from_user.id
    current_model = AVAILABLE_MODELS[get_user_model(user_id)]
    
    # [–ò–ó–ú–ï–ù–ï–ù–û] –û–±–Ω–æ–≤–ª–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
    text = f"""
ü§ñ **–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI**

**–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {current_model['display_name']}

**üß† DeepHermes 24B (–ë—ã—Å—Ç—Ä–∞—è –∏ –≥–ª—É–±–æ–∫–∞—è)**
‚Ä¢ ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è (~30-60 —Å–µ–∫)
‚Ä¢ üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –≤ —Ç–µ–≥–∞—Ö `<think>` (–≤ —Ä–µ–∂–∏–º–µ /debug).
‚Ä¢ üëç –õ—É—á—à–µ –¥–ª—è: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á, –±—ã—Å—Ç—Ä—ã—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
‚Ä¢ üìù –¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞: –¥–æ {AVAILABLE_MODELS['deephermes']['max_tokens']}

**üöÄ Hermes 405B (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â—å)**
‚Ä¢ ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: –ù–∏–∑–∫–∞—è (~2-4 –º–∏–Ω—É—Ç—ã). –¢—Ä–µ–±—É–µ—Ç —Ç–µ—Ä–ø–µ–Ω–∏—è!
‚Ä¢ üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –ù–∞–∏–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –≥–ª—É–±–∏–Ω–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞.
‚Ä¢ üëç –õ—É—á—à–µ –¥–ª—è: –û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
‚Ä¢ üìù –¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞: –¥–æ {AVAILABLE_MODELS['hermes405b']['max_tokens']}

**üí° –°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DeepHermes –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ Hermes 405B, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–¥–æ–∂–¥–∞—Ç—å.

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å:
    """
    await message.answer(text, reply_markup=create_model_keyboard())

@dp.callback_query(lambda c: c.data.startswith('model_'))
async def process_model_selection(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    model_key = callback_query.data.split('_')[1]
    
    if model_key in AVAILABLE_MODELS:
        set_user_model(user_id, model_key)
        model_info = AVAILABLE_MODELS[model_key]
        
        # [–ò–ó–ú–ï–ù–ï–ù–û] –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        extra_info = ""
        if model_key == "hermes405b":
            extra_info = "\n\n**‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:** –≠—Ç–∞ –º–æ–¥–µ–ª—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –æ–∂–∏–¥–∞–Ω–∏—é."
        
        text = f"""
‚úÖ **–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!**

**–í—ã–±—Ä–∞–Ω–∞:** {model_info['display_name']}
**–û–ø–∏—Å–∞–Ω–∏–µ:** {model_info['description']}
**–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {model_info['context']} —Ç–æ–∫–µ–Ω–æ–≤
**–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞:** {model_info['max_tokens']}{extra_info}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã! üöÄ
        """
        
        await callback_query.message.edit_text(text)
        await callback_query.answer(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {model_info['display_name']}")
    else:
        await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")

@dp.callback_query(lambda c: c.data == 'cancel')
async def process_cancel(callback_query: CallbackQuery):
    await callback_query.message.delete()
    await callback_query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (/help, /premium, /debug, /stats) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
# —Ç–∞–∫ –∫–∞–∫ –∏—Ö –ª–æ–≥–∏–∫–∞ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–µ–π.
# –ú–æ–∂–Ω–æ –ª–∏—à—å –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –≤ –Ω–∏—Ö –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ.
@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """
üìö **–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å**

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –ø–æ—à–∞–≥–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ª—é–±—ã—Ö —è–∑—ã–∫–∞—Ö
‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Å—Ç–∏—Ö–∏, —Ä–∞—Å—Å–∫–∞–∑—ã)
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥—ã
‚Ä¢ –ü–æ–º–æ—â—å —Å —É—á–µ–±–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏

ü§ñ **–ú–æ–¥–µ–ª–∏:**
‚Ä¢ **DeepHermes 24B** - –ë—ã—Å—Ç—Ä–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º—ã—à–ª–µ–Ω–∏–µ.
‚Ä¢ **Hermes 405B** - –°–∞–º–∞—è –º–æ—â–Ω–∞—è –¥–ª—è –≥–ª—É–±–æ—á–∞–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–∏—é —Å—Ç—Ä—É–Ω —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –º–Ω–µ 15 –ª–µ—Ç"
‚Ä¢ "–ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –Ω–∞ Python, –∏—Å–ø–æ–ª—å–∑—É—è httpx, —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ä–µ—Ç—Ä–∞—è–º–∏"  
‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ä—ã–Ω–æ—á–Ω–æ–π –∏ –ø–ª–∞–Ω–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏"
‚Ä¢ "–†–µ—à–∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª: ‚à´(x^2 * sin(x)) dx"

üîß **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/model - –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
/debug - –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ–∫–∞–∑–∞—Ç—å <think> –¥–ª—è 24B)
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

‚öôÔ∏è **–õ–∏–º–∏—Ç—ã:**
‚Ä¢ 1 –∑–∞–ø—Ä–æ—Å –≤ 3 —Å–µ–∫—É–Ω–¥—ã.
‚Ä¢ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç 405B –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

üîç **–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏:**
–ö–æ–º–∞–Ω–¥–∞ /debug –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π DeepHermes –≤ —Ç–µ–≥–∞—Ö <think>. –ù–∞ Hermes 405B –Ω–µ –≤–ª–∏—è–µ—Ç.
    """
    await message.answer(help_text)

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    user_id = message.from_user.id
    count = user_stats.get(user_id, 0)
    current_model_key = get_user_model(user_id)
    current_model = AVAILABLE_MODELS[current_model_key]
    debug_mode = get_user_debug_mode(user_id)
    last_request_time = user_last_request.get(user_id, 0)
    last_request_str = "–ù–∏–∫–æ–≥–¥–∞" if last_request_time == 0 else datetime.fromtimestamp(last_request_time).strftime("%H:%M:%S")
    
    stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:** {user_id}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {count}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {last_request_str}

ü§ñ **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ú–æ–¥–µ–ª—å: {current_model['display_name']}
‚Ä¢ Max —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞: {current_model['max_tokens']}
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_model['temperature']}
‚Ä¢ –¢–∞–π–º–∞—É—Ç: {current_model['timeout']}s
‚Ä¢ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'üü¢ –í–∫–ª—é—á–µ–Ω' if debug_mode else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'} (–¥–ª—è DeepHermes)

‚ö° **–û –±–æ—Ç–µ:**
‚Ä¢ –í–µ—Ä—Å–∏—è: 3.0 (Unleashed)
‚Ä¢ API: Nous Research
    """
    await message.answer(stats_text)


@dp.message()
async def handle_message(message: Message):
    user_message = message.text
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if not check_rate_limit(user_id):
        remaining_time = get_time_until_next_request(user_id)
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫. –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        return
    
    user_stats[user_id] = user_stats.get(user_id, 0) + 1
    
    user_model = get_user_model(user_id)
    model_info = AVAILABLE_MODELS[user_model]
    debug_mode = get_user_debug_mode(user_id)
    
    logger.info(f"üìù –ó–∞–ø—Ä–æ—Å #{user_stats[user_id]} –æ—Ç {user_name} (ID: {user_id}, –º–æ–¥–µ–ª—å: {model_info['display_name']}): {user_message[:50]}...")
    
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    # [–ò–ó–ú–ï–ù–ï–ù–û] –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    status_msg = None
    if user_model == "hermes405b":
        status_msg = await message.answer(f"""
üöÄ **–ú–æ–¥–µ–ª—å {model_info['display_name']}** –ø—Ä–∏–Ω—è–ª–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç—É.

–≠—Ç–æ —Å–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å, –ø–æ—ç—Ç–æ–º—É –µ–π –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑.

‚è± **–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 2-4 –º–∏–Ω—É—Ç—ã.**
‚òïÔ∏è –ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Å–µ–±–µ —á–∞–π. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ç–æ–∏—Ç —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–æ–∂–¥–∞—Ç—å!
        """)
    elif len(user_message) > 300: # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª–∏ —Ç–æ–∂–µ –ø–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç—É—Å
        status_msg = await message.answer(f"üß† **{model_info['display_name']}** –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è± –û–∂–∏–¥–∞–π—Ç–µ –¥–æ 1 –º–∏–Ω—É—Ç—ã")
    
    try:
        ai_response = await call_nous_api(user_message, user_id)
        
        if status_msg:
            try:
                await status_msg.delete()  
            except:
                pass
        
        if "rate limit" in ai_response.lower() or "429" in ai_response or "–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç" in ai_response.lower():
            await message.answer(ai_response)
            return

        if debug_mode and user_model == "deephermes":
            final_response = ai_response
        else:
            final_response = clean_ai_response(ai_response)
        
        model_prefix = f"ü§ñ **–û—Ç–≤–µ—Ç –æ—Ç {model_info['display_name']}:**\n\n"
        final_response = model_prefix + final_response
        
        if len(final_response) > 4000:
            parts = []
            current_part = ""
            for line in final_response.split('\n'):
                if len(current_part) + len(line) + 1 > 4000:
                    parts.append(current_part)
                    current_part = line
                else:
                    current_part += '\n' + line
            parts.append(current_part)
            
            for i, part in enumerate(parts):
                if i == 0:
                    await message.answer(part)
                else:
                    await message.answer(part)
                await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
        else:
            await message.answer(final_response)
            
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (–º–æ–¥–µ–ª—å: {model_info['display_name']}, –¥–ª–∏–Ω–∞: {len(final_response)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name}: {str(e)}")
        if status_msg:
            try:
                await status_msg.delete()
            except:
                pass
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å Nous Research API (–í–µ—Ä—Å–∏—è 3.0, Unleashed)...")
    logger.info(f"Bot Token: {BOT_TOKEN[:10]}...")
    logger.info(f"API Key: {NOUS_API_KEY[:10]}...")
    
    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞:")
    logger.info(f"   ‚Ä¢ Hermes 405B: max_tokens={AVAILABLE_MODELS['hermes405b']['max_tokens']}, temperature={AVAILABLE_MODELS['hermes405b']['temperature']}")
    logger.info("   ‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É—Ä–µ–∑–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    
    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: @{bot_info.username}")
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üîÑ Webhook —É–¥–∞–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
